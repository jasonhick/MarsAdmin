'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NAP")>  _
Partial Public Class NAPDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertProductsXCategory(instance As ProductsXCategory)
    End Sub
  Partial Private Sub UpdateProductsXCategory(instance As ProductsXCategory)
    End Sub
  Partial Private Sub DeleteProductsXCategory(instance As ProductsXCategory)
    End Sub
  Partial Private Sub InsertChoice(instance As Choice)
    End Sub
  Partial Private Sub UpdateChoice(instance As Choice)
    End Sub
  Partial Private Sub DeleteChoice(instance As Choice)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NAPConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property ProductsXCategories() As System.Data.Linq.Table(Of ProductsXCategory)
		Get
			Return Me.GetTable(Of ProductsXCategory)
		End Get
	End Property
	
	Public ReadOnly Property Choices() As System.Data.Linq.Table(Of Choice)
		Get
			Return Me.GetTable(Of Choice)
		End Get
	End Property
	
	Public ReadOnly Property vw_Customers() As System.Data.Linq.Table(Of vw_Customer)
		Get
			Return Me.GetTable(Of vw_Customer)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.adm_SuppliersActive_s")>  _
	Public Function GetActiveSuppliers() As ISingleResult(Of Supplier)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of Supplier))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Short
	
	Private _SKU As String
	
	Private _Name As String
	
	Private _Price As Decimal
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _Cost As System.Nullable(Of Decimal)
	
	Private _SupplierID As System.Nullable(Of Short)
	
	Private _SupplierSKU As String
	
	Private _HasVariants As System.Nullable(Of Boolean)
	
	Private _IsPersonalised As Boolean
	
	Private _IsExpress As System.Nullable(Of Boolean)
	
	Private _IsWrappable As System.Nullable(Of Boolean)
	
	Private _IsNew As System.Nullable(Of Boolean)
	
	Private _IsTop20 As System.Nullable(Of Boolean)
	
	Private _Option As String
	
	Private _TaxClass As String
	
	Private _ShipSeparately As System.Nullable(Of Boolean)
	
	Private _WeightGM As System.Nullable(Of Short)
	
	Private _WidthCM As System.Nullable(Of Byte)
	
	Private _LengthCM As System.Nullable(Of Byte)
	
	Private _HeightCM As System.Nullable(Of Byte)
	
	Private _DescriptionShort As String
	
	Private _DescriptionMedium As String
	
	Private _DescriptionLong As String
	
	Private _MetaTitle As String
	
	Private _MetaDescription As String
	
	Private _MetaKeywords As String
	
	Private _RewriteURL As String
	
	Private _ImageFileName As String
	
	Private _Active As Boolean
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateModified As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _ModifiedBy As String
	
	Private _stock As System.Nullable(Of Integer)
	
	Private _ProductsXCategories As EntitySet(Of ProductsXCategory)
	
	Private _Choices As EntitySet(Of Choice)
	
	Private _Supplier As EntityRef(Of Supplier)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Short)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnSalePriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalePriceChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnSupplierSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierSKUChanged()
    End Sub
    Partial Private Sub OnHasVariantsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnHasVariantsChanged()
    End Sub
    Partial Private Sub OnIsPersonalisedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPersonalisedChanged()
    End Sub
    Partial Private Sub OnIsExpressChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsExpressChanged()
    End Sub
    Partial Private Sub OnIsWrappableChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsWrappableChanged()
    End Sub
    Partial Private Sub OnIsNewChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsNewChanged()
    End Sub
    Partial Private Sub OnIsTop20Changing(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsTop20Changed()
    End Sub
    Partial Private Sub OnOptionChanging(value As String)
    End Sub
    Partial Private Sub OnOptionChanged()
    End Sub
    Partial Private Sub OnTaxClassChanging(value As String)
    End Sub
    Partial Private Sub OnTaxClassChanged()
    End Sub
    Partial Private Sub OnShipSeparatelyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShipSeparatelyChanged()
    End Sub
    Partial Private Sub OnWeightGMChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnWeightGMChanged()
    End Sub
    Partial Private Sub OnWidthCMChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnWidthCMChanged()
    End Sub
    Partial Private Sub OnLengthCMChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnLengthCMChanged()
    End Sub
    Partial Private Sub OnHeightCMChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnHeightCMChanged()
    End Sub
    Partial Private Sub OnDescriptionShortChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionShortChanged()
    End Sub
    Partial Private Sub OnDescriptionMediumChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionMediumChanged()
    End Sub
    Partial Private Sub OnDescriptionLongChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionLongChanged()
    End Sub
    Partial Private Sub OnMetaTitleChanging(value As String)
    End Sub
    Partial Private Sub OnMetaTitleChanged()
    End Sub
    Partial Private Sub OnMetaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMetaDescriptionChanged()
    End Sub
    Partial Private Sub OnMetaKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnMetaKeywordsChanged()
    End Sub
    Partial Private Sub OnRewriteURLChanging(value As String)
    End Sub
    Partial Private Sub OnRewriteURLChanged()
    End Sub
    Partial Private Sub OnImageFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnImageFileNameChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnstockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstockChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductsXCategories = New EntitySet(Of ProductsXCategory)(AddressOf Me.attach_ProductsXCategories, AddressOf Me.detach_ProductsXCategories)
		Me._Choices = New EntitySet(Of Choice)(AddressOf Me.attach_Choices, AddressOf Me.detach_Choices)
		Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Short
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="VarChar(5)")>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="SmallMoney NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="SmallMoney")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me.OnSalePriceChanging(value)
				Me.SendPropertyChanging
				Me._SalePrice = value
				Me.SendPropertyChanged("SalePrice")
				Me.OnSalePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="SmallMoney")>  _
	Public Property Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Cost
		End Get
		Set
			If (Me._Cost.Equals(value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="SmallInt")>  _
	Public Property SupplierID() As System.Nullable(Of Short)
		Get
			Return Me._SupplierID
		End Get
		Set
			If (Me._SupplierID.Equals(value) = false) Then
				If Me._Supplier.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierSKU", DbType:="VarChar(20)")>  _
	Public Property SupplierSKU() As String
		Get
			Return Me._SupplierSKU
		End Get
		Set
			If (String.Equals(Me._SupplierSKU, value) = false) Then
				Me.OnSupplierSKUChanging(value)
				Me.SendPropertyChanging
				Me._SupplierSKU = value
				Me.SendPropertyChanged("SupplierSKU")
				Me.OnSupplierSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HasVariants", DbType:="Bit")>  _
	Public Property HasVariants() As System.Nullable(Of Boolean)
		Get
			Return Me._HasVariants
		End Get
		Set
			If (Me._HasVariants.Equals(value) = false) Then
				Me.OnHasVariantsChanging(value)
				Me.SendPropertyChanging
				Me._HasVariants = value
				Me.SendPropertyChanged("HasVariants")
				Me.OnHasVariantsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPersonalised", DbType:="Bit NOT NULL")>  _
	Public Property IsPersonalised() As Boolean
		Get
			Return Me._IsPersonalised
		End Get
		Set
			If ((Me._IsPersonalised = value)  _
						= false) Then
				Me.OnIsPersonalisedChanging(value)
				Me.SendPropertyChanging
				Me._IsPersonalised = value
				Me.SendPropertyChanged("IsPersonalised")
				Me.OnIsPersonalisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsExpress", DbType:="Bit")>  _
	Public Property IsExpress() As System.Nullable(Of Boolean)
		Get
			Return Me._IsExpress
		End Get
		Set
			If (Me._IsExpress.Equals(value) = false) Then
				Me.OnIsExpressChanging(value)
				Me.SendPropertyChanging
				Me._IsExpress = value
				Me.SendPropertyChanged("IsExpress")
				Me.OnIsExpressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsWrappable", DbType:="Bit")>  _
	Public Property IsWrappable() As System.Nullable(Of Boolean)
		Get
			Return Me._IsWrappable
		End Get
		Set
			If (Me._IsWrappable.Equals(value) = false) Then
				Me.OnIsWrappableChanging(value)
				Me.SendPropertyChanging
				Me._IsWrappable = value
				Me.SendPropertyChanged("IsWrappable")
				Me.OnIsWrappableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsNew", DbType:="Bit")>  _
	Public Property IsNew() As System.Nullable(Of Boolean)
		Get
			Return Me._IsNew
		End Get
		Set
			If (Me._IsNew.Equals(value) = false) Then
				Me.OnIsNewChanging(value)
				Me.SendPropertyChanging
				Me._IsNew = value
				Me.SendPropertyChanged("IsNew")
				Me.OnIsNewChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsTop20", DbType:="Bit")>  _
	Public Property IsTop20() As System.Nullable(Of Boolean)
		Get
			Return Me._IsTop20
		End Get
		Set
			If (Me._IsTop20.Equals(value) = false) Then
				Me.OnIsTop20Changing(value)
				Me.SendPropertyChanging
				Me._IsTop20 = value
				Me.SendPropertyChanged("IsTop20")
				Me.OnIsTop20Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Option", DbType:="VarChar(25)")>  _
	Public Property [Option]() As String
		Get
			Return Me._Option
		End Get
		Set
			If (String.Equals(Me._Option, value) = false) Then
				Me.OnOptionChanging(value)
				Me.SendPropertyChanging
				Me._Option = value
				Me.SendPropertyChanged("[Option]")
				Me.OnOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxClass", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property TaxClass() As String
		Get
			Return Me._TaxClass
		End Get
		Set
			If (String.Equals(Me._TaxClass, value) = false) Then
				Me.OnTaxClassChanging(value)
				Me.SendPropertyChanging
				Me._TaxClass = value
				Me.SendPropertyChanged("TaxClass")
				Me.OnTaxClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipSeparately", DbType:="Bit")>  _
	Public Property ShipSeparately() As System.Nullable(Of Boolean)
		Get
			Return Me._ShipSeparately
		End Get
		Set
			If (Me._ShipSeparately.Equals(value) = false) Then
				Me.OnShipSeparatelyChanging(value)
				Me.SendPropertyChanging
				Me._ShipSeparately = value
				Me.SendPropertyChanged("ShipSeparately")
				Me.OnShipSeparatelyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGM", DbType:="SmallInt")>  _
	Public Property WeightGM() As System.Nullable(Of Short)
		Get
			Return Me._WeightGM
		End Get
		Set
			If (Me._WeightGM.Equals(value) = false) Then
				Me.OnWeightGMChanging(value)
				Me.SendPropertyChanging
				Me._WeightGM = value
				Me.SendPropertyChanged("WeightGM")
				Me.OnWeightGMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCM", DbType:="TinyInt")>  _
	Public Property WidthCM() As System.Nullable(Of Byte)
		Get
			Return Me._WidthCM
		End Get
		Set
			If (Me._WidthCM.Equals(value) = false) Then
				Me.OnWidthCMChanging(value)
				Me.SendPropertyChanging
				Me._WidthCM = value
				Me.SendPropertyChanged("WidthCM")
				Me.OnWidthCMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LengthCM", DbType:="TinyInt")>  _
	Public Property LengthCM() As System.Nullable(Of Byte)
		Get
			Return Me._LengthCM
		End Get
		Set
			If (Me._LengthCM.Equals(value) = false) Then
				Me.OnLengthCMChanging(value)
				Me.SendPropertyChanging
				Me._LengthCM = value
				Me.SendPropertyChanged("LengthCM")
				Me.OnLengthCMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCM", DbType:="TinyInt")>  _
	Public Property HeightCM() As System.Nullable(Of Byte)
		Get
			Return Me._HeightCM
		End Get
		Set
			If (Me._HeightCM.Equals(value) = false) Then
				Me.OnHeightCMChanging(value)
				Me.SendPropertyChanging
				Me._HeightCM = value
				Me.SendPropertyChanged("HeightCM")
				Me.OnHeightCMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescriptionShort", DbType:="VarChar(50)")>  _
	Public Property DescriptionShort() As String
		Get
			Return Me._DescriptionShort
		End Get
		Set
			If (String.Equals(Me._DescriptionShort, value) = false) Then
				Me.OnDescriptionShortChanging(value)
				Me.SendPropertyChanging
				Me._DescriptionShort = value
				Me.SendPropertyChanged("DescriptionShort")
				Me.OnDescriptionShortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescriptionMedium", DbType:="VarChar(500)")>  _
	Public Property DescriptionMedium() As String
		Get
			Return Me._DescriptionMedium
		End Get
		Set
			If (String.Equals(Me._DescriptionMedium, value) = false) Then
				Me.OnDescriptionMediumChanging(value)
				Me.SendPropertyChanging
				Me._DescriptionMedium = value
				Me.SendPropertyChanged("DescriptionMedium")
				Me.OnDescriptionMediumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescriptionLong", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescriptionLong() As String
		Get
			Return Me._DescriptionLong
		End Get
		Set
			If (String.Equals(Me._DescriptionLong, value) = false) Then
				Me.OnDescriptionLongChanging(value)
				Me.SendPropertyChanging
				Me._DescriptionLong = value
				Me.SendPropertyChanged("DescriptionLong")
				Me.OnDescriptionLongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaTitle", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property MetaTitle() As String
		Get
			Return Me._MetaTitle
		End Get
		Set
			If (String.Equals(Me._MetaTitle, value) = false) Then
				Me.OnMetaTitleChanging(value)
				Me.SendPropertyChanging
				Me._MetaTitle = value
				Me.SendPropertyChanged("MetaTitle")
				Me.OnMetaTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDescription", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property MetaDescription() As String
		Get
			Return Me._MetaDescription
		End Get
		Set
			If (String.Equals(Me._MetaDescription, value) = false) Then
				Me.OnMetaDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._MetaDescription = value
				Me.SendPropertyChanged("MetaDescription")
				Me.OnMetaDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaKeywords", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property MetaKeywords() As String
		Get
			Return Me._MetaKeywords
		End Get
		Set
			If (String.Equals(Me._MetaKeywords, value) = false) Then
				Me.OnMetaKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._MetaKeywords = value
				Me.SendPropertyChanged("MetaKeywords")
				Me.OnMetaKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RewriteURL", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RewriteURL() As String
		Get
			Return Me._RewriteURL
		End Get
		Set
			If (String.Equals(Me._RewriteURL, value) = false) Then
				Me.OnRewriteURLChanging(value)
				Me.SendPropertyChanging
				Me._RewriteURL = value
				Me.SendPropertyChanged("RewriteURL")
				Me.OnRewriteURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileName", DbType:="VarChar(50)")>  _
	Public Property ImageFileName() As String
		Get
			Return Me._ImageFileName
		End Get
		Set
			If (String.Equals(Me._ImageFileName, value) = false) Then
				Me.OnImageFileNameChanging(value)
				Me.SendPropertyChanging
				Me._ImageFileName = value
				Me.SendPropertyChanged("ImageFileName")
				Me.OnImageFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="SmallDateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateModified", DbType:="SmallDateTime")>  _
	Public Property DateModified() As System.Nullable(Of Date)
		Get
			Return Me._DateModified
		End Get
		Set
			If (Me._DateModified.Equals(value) = false) Then
				Me.OnDateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._DateModified = value
				Me.SendPropertyChanged("DateModified")
				Me.OnDateModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(10)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="VarChar(10)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stock", DbType:="Int")>  _
	Public Property stock() As System.Nullable(Of Integer)
		Get
			Return Me._stock
		End Get
		Set
			If (Me._stock.Equals(value) = false) Then
				Me.OnstockChanging(value)
				Me.SendPropertyChanging
				Me._stock = value
				Me.SendPropertyChanged("stock")
				Me.OnstockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductsXCategory", Storage:="_ProductsXCategories", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property ProductsXCategories() As EntitySet(Of ProductsXCategory)
		Get
			Return Me._ProductsXCategories
		End Get
		Set
			Me._ProductsXCategories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Choice", Storage:="_Choices", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property Choices() As EntitySet(Of Choice)
		Get
			Return Me._Choices
		End Get
		Set
			Me._Choices.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Supplier() As Supplier
		Get
			Return Me._Supplier.Entity
		End Get
		Set
			Dim previousValue As Supplier = Me._Supplier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Supplier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Supplier.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._Supplier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._SupplierID = value.ID
				Else
					Me._SupplierID = CType(Nothing, Nullable(Of Short))
				End If
				Me.SendPropertyChanged("Supplier")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductsXCategories(ByVal entity As ProductsXCategory)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_ProductsXCategories(ByVal entity As ProductsXCategory)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_Choices(ByVal entity As Choice)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_Choices(ByVal entity As Choice)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Suppliers")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Short
	
	Private _Name As String
	
	Private _ContactTel As String
	
	Private _Products As EntitySet(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Short)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnContactTelChanging(value As String)
    End Sub
    Partial Private Sub OnContactTelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Short
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(100)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTel", DbType:="VarChar(100)")>  _
	Public Property ContactTel() As String
		Get
			Return Me._ContactTel
		End Get
		Set
			If (String.Equals(Me._ContactTel, value) = false) Then
				Me.OnContactTelChanging(value)
				Me.SendPropertyChanging
				Me._ContactTel = value
				Me.SendPropertyChanged("ContactTel")
				Me.OnContactTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="SupplierID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Supplier = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Supplier = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Short
	
	Private _ParentID As System.Nullable(Of Short)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _TagLine As String
	
	Private _BannerImage As String
	
	Private _Image As String
	
	Private _MenuOffImage As String
	
	Private _MenuOnImage As String
	
	Private _MetaTitle As String
	
	Private _MetaDescription As String
	
	Private _MetaKeywords As String
	
	Private _URLPrefix As String
	
	Private _RewriteURL As String
	
	Private _ShowInMenu As Boolean
	
	Private _Active As Boolean
	
	Private _SortOrder As System.Nullable(Of Short)
	
	Private _DateCreated As Date
	
	Private _LastModified As Date
	
	Private _ModifiedBy As String
	
	Private _OLDCATID As System.Nullable(Of Short)
	
	Private _IsFeatured As Boolean
	
	Private _ProductsXCategories As EntitySet(Of ProductsXCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Short)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTagLineChanging(value As String)
    End Sub
    Partial Private Sub OnTagLineChanged()
    End Sub
    Partial Private Sub OnBannerImageChanging(value As String)
    End Sub
    Partial Private Sub OnBannerImageChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnMenuOffImageChanging(value As String)
    End Sub
    Partial Private Sub OnMenuOffImageChanged()
    End Sub
    Partial Private Sub OnMenuOnImageChanging(value As String)
    End Sub
    Partial Private Sub OnMenuOnImageChanged()
    End Sub
    Partial Private Sub OnMetaTitleChanging(value As String)
    End Sub
    Partial Private Sub OnMetaTitleChanged()
    End Sub
    Partial Private Sub OnMetaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMetaDescriptionChanged()
    End Sub
    Partial Private Sub OnMetaKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnMetaKeywordsChanged()
    End Sub
    Partial Private Sub OnURLPrefixChanging(value As String)
    End Sub
    Partial Private Sub OnURLPrefixChanged()
    End Sub
    Partial Private Sub OnRewriteURLChanging(value As String)
    End Sub
    Partial Private Sub OnRewriteURLChanged()
    End Sub
    Partial Private Sub OnShowInMenuChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowInMenuChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnOLDCATIDChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnOLDCATIDChanged()
    End Sub
    Partial Private Sub OnIsFeaturedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsFeaturedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductsXCategories = New EntitySet(Of ProductsXCategory)(AddressOf Me.attach_ProductsXCategories, AddressOf Me.detach_ProductsXCategories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Short
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="SmallInt")>  _
	Public Property ParentID() As System.Nullable(Of Short)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagLine", DbType:="VarChar(50)")>  _
	Public Property TagLine() As String
		Get
			Return Me._TagLine
		End Get
		Set
			If (String.Equals(Me._TagLine, value) = false) Then
				Me.OnTagLineChanging(value)
				Me.SendPropertyChanging
				Me._TagLine = value
				Me.SendPropertyChanged("TagLine")
				Me.OnTagLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BannerImage", DbType:="VarChar(20)")>  _
	Public Property BannerImage() As String
		Get
			Return Me._BannerImage
		End Get
		Set
			If (String.Equals(Me._BannerImage, value) = false) Then
				Me.OnBannerImageChanging(value)
				Me.SendPropertyChanging
				Me._BannerImage = value
				Me.SendPropertyChanged("BannerImage")
				Me.OnBannerImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(20)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuOffImage", DbType:="VarChar(20)")>  _
	Public Property MenuOffImage() As String
		Get
			Return Me._MenuOffImage
		End Get
		Set
			If (String.Equals(Me._MenuOffImage, value) = false) Then
				Me.OnMenuOffImageChanging(value)
				Me.SendPropertyChanging
				Me._MenuOffImage = value
				Me.SendPropertyChanged("MenuOffImage")
				Me.OnMenuOffImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuOnImage", DbType:="VarChar(20)")>  _
	Public Property MenuOnImage() As String
		Get
			Return Me._MenuOnImage
		End Get
		Set
			If (String.Equals(Me._MenuOnImage, value) = false) Then
				Me.OnMenuOnImageChanging(value)
				Me.SendPropertyChanging
				Me._MenuOnImage = value
				Me.SendPropertyChanged("MenuOnImage")
				Me.OnMenuOnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaTitle", DbType:="VarChar(120) NOT NULL", CanBeNull:=false)>  _
	Public Property MetaTitle() As String
		Get
			Return Me._MetaTitle
		End Get
		Set
			If (String.Equals(Me._MetaTitle, value) = false) Then
				Me.OnMetaTitleChanging(value)
				Me.SendPropertyChanging
				Me._MetaTitle = value
				Me.SendPropertyChanged("MetaTitle")
				Me.OnMetaTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaDescription", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property MetaDescription() As String
		Get
			Return Me._MetaDescription
		End Get
		Set
			If (String.Equals(Me._MetaDescription, value) = false) Then
				Me.OnMetaDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._MetaDescription = value
				Me.SendPropertyChanged("MetaDescription")
				Me.OnMetaDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetaKeywords", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MetaKeywords() As String
		Get
			Return Me._MetaKeywords
		End Get
		Set
			If (String.Equals(Me._MetaKeywords, value) = false) Then
				Me.OnMetaKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._MetaKeywords = value
				Me.SendPropertyChanged("MetaKeywords")
				Me.OnMetaKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLPrefix", DbType:="VarChar(30)")>  _
	Public Property URLPrefix() As String
		Get
			Return Me._URLPrefix
		End Get
		Set
			If (String.Equals(Me._URLPrefix, value) = false) Then
				Me.OnURLPrefixChanging(value)
				Me.SendPropertyChanging
				Me._URLPrefix = value
				Me.SendPropertyChanged("URLPrefix")
				Me.OnURLPrefixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RewriteURL", DbType:="VarChar(50)")>  _
	Public Property RewriteURL() As String
		Get
			Return Me._RewriteURL
		End Get
		Set
			If (String.Equals(Me._RewriteURL, value) = false) Then
				Me.OnRewriteURLChanging(value)
				Me.SendPropertyChanging
				Me._RewriteURL = value
				Me.SendPropertyChanged("RewriteURL")
				Me.OnRewriteURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowInMenu", DbType:="Bit NOT NULL")>  _
	Public Property ShowInMenu() As Boolean
		Get
			Return Me._ShowInMenu
		End Get
		Set
			If ((Me._ShowInMenu = value)  _
						= false) Then
				Me.OnShowInMenuChanging(value)
				Me.SendPropertyChanging
				Me._ShowInMenu = value
				Me.SendPropertyChanged("ShowInMenu")
				Me.OnShowInMenuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="SmallInt")>  _
	Public Property SortOrder() As System.Nullable(Of Short)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me.OnSortOrderChanging(value)
				Me.SendPropertyChanging
				Me._SortOrder = value
				Me.SendPropertyChanged("SortOrder")
				Me.OnSortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime NOT NULL")>  _
	Public Property LastModified() As Date
		Get
			Return Me._LastModified
		End Get
		Set
			If ((Me._LastModified = value)  _
						= false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OLDCATID", DbType:="SmallInt")>  _
	Public Property OLDCATID() As System.Nullable(Of Short)
		Get
			Return Me._OLDCATID
		End Get
		Set
			If (Me._OLDCATID.Equals(value) = false) Then
				Me.OnOLDCATIDChanging(value)
				Me.SendPropertyChanging
				Me._OLDCATID = value
				Me.SendPropertyChanged("OLDCATID")
				Me.OnOLDCATIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Bit NOT NULL")>  _
	Public Property IsFeatured() As Boolean
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me.OnIsFeaturedChanging(value)
				Me.SendPropertyChanging
				Me._IsFeatured = value
				Me.SendPropertyChanged("IsFeatured")
				Me.OnIsFeaturedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ProductsXCategory", Storage:="_ProductsXCategories", ThisKey:="ID", OtherKey:="CategoryID")>  _
	Public Property ProductsXCategories() As EntitySet(Of ProductsXCategory)
		Get
			Return Me._ProductsXCategories
		End Get
		Set
			Me._ProductsXCategories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductsXCategories(ByVal entity As ProductsXCategory)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_ProductsXCategories(ByVal entity As ProductsXCategory)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductsXCategories")>  _
Partial Public Class ProductsXCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Short
	
	Private _CategoryID As Short
	
	Private _IsFeaturedOnHomePage As Boolean
	
	Private _Category As EntityRef(Of Category)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Short)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Short)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnIsFeaturedOnHomePageChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsFeaturedOnHomePageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Category = CType(Nothing, EntityRef(Of Category))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductID() As Short
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryID() As Short
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeaturedOnHomePage", DbType:="Bit NOT NULL")>  _
	Public Property IsFeaturedOnHomePage() As Boolean
		Get
			Return Me._IsFeaturedOnHomePage
		End Get
		Set
			If ((Me._IsFeaturedOnHomePage = value)  _
						= false) Then
				Me.OnIsFeaturedOnHomePageChanging(value)
				Me.SendPropertyChanging
				Me._IsFeaturedOnHomePage = value
				Me.SendPropertyChanged("IsFeaturedOnHomePage")
				Me.OnIsFeaturedOnHomePageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ProductsXCategory", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.ProductsXCategories.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductsXCategories.Add(Me)
					Me._CategoryID = value.ID
				Else
					Me._CategoryID = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductsXCategory", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ProductsXCategories.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductsXCategories.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Choices")>  _
Partial Public Class Choice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ProductID As Short
	
	Private _LabelText As String
	
	Private _DisplayType As String
	
	Private _DisplayOrder As Byte
	
	Private _ErrorMessage As String
	
	Private _Validate As Boolean
	
	Private _Active As Boolean
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Short)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnLabelTextChanging(value As String)
    End Sub
    Partial Private Sub OnLabelTextChanged()
    End Sub
    Partial Private Sub OnDisplayTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayTypeChanged()
    End Sub
    Partial Private Sub OnDisplayOrderChanging(value As Byte)
    End Sub
    Partial Private Sub OnDisplayOrderChanged()
    End Sub
    Partial Private Sub OnErrorMessageChanging(value As String)
    End Sub
    Partial Private Sub OnErrorMessageChanged()
    End Sub
    Partial Private Sub OnValidateChanging(value As Boolean)
    End Sub
    Partial Private Sub OnValidateChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="SmallInt NOT NULL")>  _
	Public Property ProductID() As Short
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabelText", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property LabelText() As String
		Get
			Return Me._LabelText
		End Get
		Set
			If (String.Equals(Me._LabelText, value) = false) Then
				Me.OnLabelTextChanging(value)
				Me.SendPropertyChanging
				Me._LabelText = value
				Me.SendPropertyChanged("LabelText")
				Me.OnLabelTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayType", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayType() As String
		Get
			Return Me._DisplayType
		End Get
		Set
			If (String.Equals(Me._DisplayType, value) = false) Then
				Me.OnDisplayTypeChanging(value)
				Me.SendPropertyChanging
				Me._DisplayType = value
				Me.SendPropertyChanged("DisplayType")
				Me.OnDisplayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="TinyInt NOT NULL")>  _
	Public Property DisplayOrder() As Byte
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me.OnDisplayOrderChanging(value)
				Me.SendPropertyChanging
				Me._DisplayOrder = value
				Me.SendPropertyChanged("DisplayOrder")
				Me.OnDisplayOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorMessage", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property ErrorMessage() As String
		Get
			Return Me._ErrorMessage
		End Get
		Set
			If (String.Equals(Me._ErrorMessage, value) = false) Then
				Me.OnErrorMessageChanging(value)
				Me.SendPropertyChanging
				Me._ErrorMessage = value
				Me.SendPropertyChanged("ErrorMessage")
				Me.OnErrorMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate", DbType:="Bit NOT NULL")>  _
	Public Property Validate() As Boolean
		Get
			Return Me._Validate
		End Get
		Set
			If ((Me._Validate = value)  _
						= false) Then
				Me.OnValidateChanging(value)
				Me.SendPropertyChanging
				Me._Validate = value
				Me.SendPropertyChanged("Validate")
				Me.OnValidateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Choice", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.Choices.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Choices.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_Customers")>  _
Partial Public Class vw_Customer
	
	Private _ID As Integer
	
	Private _Email As String
	
	Private _Password As String
	
	Private _IsSubscribed As Boolean
	
	Private _DateCreated As Date
	
	Private _CustomerID As Integer
	
	Private _PhoneNumber As String
	
	Private _NamePrefix As String
	
	Private _NameFirst As String
	
	Private _NameLast As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSubscribed", DbType:="Bit NOT NULL")>  _
	Public Property IsSubscribed() As Boolean
		Get
			Return Me._IsSubscribed
		End Get
		Set
			If ((Me._IsSubscribed = value)  _
						= false) Then
				Me._IsSubscribed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me._DateCreated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(30)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NamePrefix", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property NamePrefix() As String
		Get
			Return Me._NamePrefix
		End Get
		Set
			If (String.Equals(Me._NamePrefix, value) = false) Then
				Me._NamePrefix = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameFirst", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property NameFirst() As String
		Get
			Return Me._NameFirst
		End Get
		Set
			If (String.Equals(Me._NameFirst, value) = false) Then
				Me._NameFirst = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameLast", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property NameLast() As String
		Get
			Return Me._NameLast
		End Get
		Set
			If (String.Equals(Me._NameLast, value) = false) Then
				Me._NameLast = value
			End If
		End Set
	End Property
End Class
